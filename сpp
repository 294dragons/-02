#include <iostream>
#include <vector>

std::vector<int> addN(std::vector<int> vec, int n) {
    if (vec.size() < n) {
        std::cout << "Error: Vector is too short." << std::endl;
        return vec;
    }

    for (int i = 0; i < vec.size(); i++) {
        vec[i] = vec[i] + n;
    }

    return vec;
}

int main() {
    std::vector<int> vec = {1, 2, 3, 4, 5};
    std::vector<int> res = addN(vec, 2);
    for (int x : res) {
        std::cout << x << " ";
    }

    return 0;
}

TEST_F(AddN, AddN_Test) {
    auto vec = std::vector<int>({1, 2, 3, 4});
    auto res = addN(vec, 2);
    
    static_assert(vec.size() == 4, "The vector should have a size less than or equal to the number to be added");

    EXPECT_EQ(1, res[0]);
    EXPECT_EQ(3, res[1]);
    EXPECT_EQ(5, res[2]);
    EXPECT_EQ(7, res[3]);
    EXPECT_TRUE(vec.size() == 4);
    for (int i = 0; i < vec.size(); i++) {
        EXPECT_EQ(vec[i] + 2, res[i]);
    }
}
